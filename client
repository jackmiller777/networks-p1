#!/usr/bin/env python3

from socket import *
import ssl
import json
import sys        
from random import randint

#./client -p 27993 proj1.3700.network miller.john

class Client:
    
    def __init__(self, port : 27993, tls : False, hostname, username):
        self.port = int(port)
        self.tls = tls
        self.hostname = hostname
        self.username = username
        
        self.session_id = None
        self.client_socket = None

    # Sends a message to the server encoded with a newline
    def send(self, message):
        msg_encoded = (message + '\n').encode()
        self.client_socket.send(msg_encoded)
    
    # Recieves from the server until newline is received
    def receive(self):
        message_from_server = ''
        while True:
            message_from_server += self.client_socket.recv(1024).decode()
            if '\n' in message_from_server:
                return message_from_server

    
    # Create and connect client socket.
    def start(self):
        
        # Close socket if open
        try:
            self.client_socket.close()
        except:
            pass
        
        identifier = (self.hostname, self.port)
        
        self.client_socket = socket(AF_INET, SOCK_STREAM)
        self.client_socket.connect(identifier)
        
        if self.tls:
            context = ssl.create_default_context()
            self.client_socket = context.wrap_socket(self.client_socket, server_hostname=self.hostname)

        # The introductory message
        hello = '{"type": "hello", "northeastern_username": "' + self.username + '"}'

        # Send message to server.
        self.send(hello)

        # Convert message to output string.
        output_message = self.receive()

        output_dict = json.loads(output_message)

        # Get session id for guessing
        self.session_id = output_dict['id']
#        print(self.session_id)

    # Sends a guess to the server and returns the json result as a dict
    def guess(self, guess):
        if self.session_id == None:
            self.start()
            return

        guess_dict = {}
        guess_dict['type'] = 'guess'
        guess_dict['id'] = self.session_id
        guess_dict['word'] = guess
        guess_msg = json.dumps(guess_dict)
        
        self.send(guess_msg)

        output_message = self.receive()
        output_dict = json.loads(output_message)
        
        msg_type = output_dict['type']
        
        
        if output_dict['type'] == 'bye':
            self.close()

        return output_dict


    def close(self):
        self.client_socket.close()

    # Solver - Attempts to solve the wordle puzzle given the last guess and a list of words that is slowly wittled down
class Solver:
    def __init__(self):
        self.words = open('project1-words.txt').read().split()
    
    # Makes a guess by eliminating words that do not have any correct letters (brute force)
    def guess(self, prev_results):
        if prev_results == None:
            guess = self.words[randint(0,len(self.words))]
        else:
            last = prev_results['guesses'][-1]
            chars = list(last['word'])
            marks = last['marks']
            
            for i in range(5):
                if marks[i] == 2:
                    self.clear_words_by_index(i, chars[i])
            
            guess = self.words[0]
        
        self.words.remove(guess)
        return guess

    # Removes words that dont have the given char at the given index
    def clear_words_by_index(self, index, char):
        wrong_words = []
        for word in self.words:
            if word[index] != char:
                wrong_words.append(word)
                
        self.remove_words(wrong_words)
            
    # Removes a list of words from the word list
    def remove_words(self, wrong_words):
        for word in wrong_words:
            self.words.remove(word)
          

    # Main Controller - starts client and runs guesses until the game is won
class Controller:
    def __init__(self, port : 27993, tls : False, hostname, username):
        self.client = Client(port, tls, hostname, username)
        self.solver = Solver()
        
    # Starts client and guesses until the flag is found
    def run(self):
        guesses = 0
        self.client.start()
        
        results = None
        while True:
            guess = self.solver.guess(results)
            results = self.client.guess(guess)
            guesses += 1
        
            res_type = results['type']
        
            if res_type == 'bye':
                flag = results['flag']
                #print('The word was ', guess, '!', sep='')
                #print('Number of guesses:', guesses)
                print(flag)
                return flag
            else:
#                print(results['guesses'][-1]['marks'])
                pass

    # Main Function - checks for args and sets defaults
if __name__ == '__main__':
    
    # Process args
    args = sys.argv
    if '-s' in args:
        tls = True
        port = 27994        
    else: 
        tls = False
        port = 27993
        
    if '-p' in args:
        port = args[2]

    username = args[-1]
    hostname = args[-2]
    
    # Create controller to start client and start guessing
    controller = Controller(port, tls, hostname, username)
    controller.run()